---
"Response format for created":
  - do:
      index:
        index:   source
        type:    foo
        id:      1
        body:    { "text": "test" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        body:
          source:
            index: source
          dest:
            index: dest
  - match: {created: 1}
  - match: {updated: 0}
  - match: {version_conflicts: 0}
  - match: {batches: 1}
  - match: {failures: []}
  - gte: { took: 0 }
  - is_false: task

---
"Response format for updated":
  - do:
      index:
        index:   source
        type:    foo
        id:      1
        body:    { "text": "test" }
  - do:
      index:
        index:   dest
        type:    foo
        id:      1
        body:    { "text": "test" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        body:
          source:
            index:   source
          dest:
            index:   dest
  - match: {created: 0}
  - match: {updated: 1}
  - match: {version_conflicts: 0}
  - match: {batches: 1}
  - match: {failures: []}
  - gte: { took: 0 }
  - is_false: task

---
"wait_for_completion=false":
  - do:
      index:
        index:   source
        type:    foo
        id:      1
        body:    { "text": "test" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        wait_for_completion: false
        body:
          source:
            index: source
          dest:
            index: dest
  - is_false: timed_out
  - match: {task: '/.+:\d+/'}
  - set: {task: task}
  - is_false: updated
  - is_false: version_conflicts
  - is_false: batches
  - is_false: failures
  - is_false: noops
  - is_false: took
  - is_false: created

  - do:
      tasks.list:
        wait_for_completion: true
        task_id: $task

---
"Response format for version conflict":
  - do:
      index:
        index:   source
        type:    foo
        id:      1
        body:    { "text": "test" }
  - do:
      index:
        index:   dest
        type:    foo
        id:      1
        body:    { "text": "test" }
  - do:
      indices.refresh: {}

  - do:
      catch: conflict
      reindex:
        body:
          source:
            index:   source
          dest:
            index:   dest
            op_type: create
  - match: {created: 0}
  - match: {updated: 0}
  - match: {version_conflicts: 1}
  - match: {batches: 1}
  - match: {failures.0.index:  dest}
  - match: {failures.0.type:   foo}
  - match: {failures.0.id:     "1"}
  - match: {failures.0.status: 409}
  - match: {failures.0.cause.type:   document_already_exists_exception}
  - match: {failures.0.cause.reason: "[foo][1]: document already exists"}
  - match: {failures.0.cause.shard:  /\d+/}
  - match: {failures.0.cause.index:  dest}
  - gte: { took: 0 }

---
"Response format for version conflict with conflicts=proceed":
  - do:
      index:
        index:   source
        type:    foo
        id:      1
        body:    { "text": "test" }
  - do:
      index:
        index:   dest
        type:    foo
        id:      1
        body:    { "text": "test" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        body:
          conflicts: proceed
          source:
            index:   source
          dest:
            index:   dest
            op_type: create
  - match: {created: 0}
  - match: {updated: 0}
  - match: {version_conflicts: 1}
  - match: {batches: 1}
  - match: {failures: []}
  - gte: { took: 0 }

---
"Simplest example in docs":
  - do:
      index:
        index:   twitter
        type:    tweet
        id:      1
        body:    { "user": "kimchy" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
          dest:
            index: new_twitter

  - do:
      search:
        index: new_twitter
  - match: { hits.total: 1 }

---
"Limit by type example in docs":
  - do:
      index:
        index:   twitter
        type:    tweet
        id:      1
        body:    { "user": "kimchy" }
  - do:
      index:
        index:   twitter
        type:    junk
        id:      1
        body:    { "user": "kimchy" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
            type:  tweet
          dest:
            index: new_twitter

  - do:
      search:
        index: new_twitter
  - match: { hits.total: 1 }

---
"Limit by query example in docs":
  - do:
      index:
        index:   twitter
        type:    tweet
        id:      1
        body:    { "user": "kimchy" }
  - do:
      index:
        index:   twitter
        type:    tweet
        id:      2
        body:    { "user": "junk" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
            query:
              match:
                user: kimchy
          dest:
            index: new_twitter

  - do:
      search:
        index: new_twitter
  - match: { hits.total: 1 }

---
"Override type example in docs":
  - do:
      index:
        index:   twitter
        type:    tweet
        id:      1
        body:    { "user": "kimchy" }
  - do:
      index:
        index:   twitter
        type:    junk
        id:      1
        body:    { "user": "kimchy" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: twitter
            type:  tweet
          dest:
            index: new_twitter
            type:  chirp

  - do:
      search:
        index: new_twitter
        type:  chirp
  - match: { hits.total: 1 }

---
"Multi index, multi type example from docs":
  - do:
      index:
        index:  twitter
        type:   tweet
        id:     1
        body:   { "user": "kimchy" }
  - do:
      index:
        index:  blog
        type:   post
        id:     1
        body:   { "user": "kimchy" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          source:
            index: [twitter, blog]
            type:  [tweet, post]
          dest:
            index: all_together

  - do:
      search:
        index: all_together
        type: tweet
        body:
          query:
            match:
              user: kimchy
  - match: { hits.total: 1 }

  - do:
      search:
        index: all_together
        type: post
        body:
          query:
            match:
              user: kimchy
  - match: { hits.total: 1 }

---
"Limit by size example from docs":
  - do:
      index:
        index:  twitter
        type:   tweet
        id:     1
        body:   { "user": "kimchy" }
  - do:
      index:
        index:  twitter
        type:   tweet
        id:     2
        body:   { "user": "kimchy" }
  - do:
      indices.refresh: {}

  - do:
      reindex:
        refresh: true
        body:
          size: 1
          source:
            index: twitter
          dest:
            index: new_twitter

  - do:
      search:
        index: new_twitter
        type: tweet
  - match: { hits.total: 1 }
